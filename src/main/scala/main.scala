import scala.annotation.tailrec

object main {
  /*
   1. If we list all the natural numbers below 10 that are multiples of 3 or 5 , we get 3, 5, 6, and 9.
   The sum of these multiples is 23.

   Find the sum of all the multiples of 3 or 5 below 1000.

   Link: https://projecteuler.net/problem=1

   Solution found 2/20/24: 233168.
   */
  def findSumOfMultiplesOf3And5(bound: Int): Int = (1 until bound).foldLeft(List.empty[Int]) { (ls: List[Int], x: Int) => if (x % 3 == 0 || x % 5 == 0) x :: ls else ls }.sum

  /*
   2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first
   terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89

   By considering the terms in the Fibonacci sequence whose values
   do not exceed four million, find the sum of the even-valued terms.

   Link: https://projecteuler.net/problem=2

   Solution found 2/20/24: 4613732.
   */
  def findSumOfEvenFibonacciNumbers4Mil(): Int = {
    @tailrec
    def getFibonacciNumbers4Mil(acc: List[Int]): List[Int] = {
      if (acc(0) <= 4000000) getFibonacciNumbers4Mil((acc(0) + acc(1)) :: acc) else acc
    }

    val fib = getFibonacciNumbers4Mil(List(2, 1))

    fib.foldLeft(0)( (acc: Int, x: Int) => if (x % 2 == 0) acc + x else acc )
  }

  def go(): Unit = {
    println(findSumOfEvenFibonacciNumbers4Mil())
  }

  def main(args: Array[String]): Unit = {
    go()
  }
}