object main {
  /*
   1. If we list all the natural numbers below 10 that are multiples of 3 or 5 , we get 3, 5, 6, and 9.
   The sum of these multiples is 23.

   Find the sum of all the multiples of 3 or 5 below 1000.

   Link: https://projecteuler.net/problem=1

   Solution found 2/20/24: 233168.
   */
  def getMultiplesOf3And5(bound: Int): List[Int] = {
    (1 to bound - 1).foldLeft(List.empty[Int]){ (ls: List[Int], x: Int) => if (x % 3 == 0 || x % 5 == 0) x :: ls else ls}
  }

  /*
   2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first
   terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89

   By considering the terms in the Fibonacci sequence whose values
   do not exceed four million, find the sum of the even-valued terms.

   Link: https://projecteuler.net/problem=2
   */
  def getEvenFibonacciNumbers4Mil(): List[Int] = {
    def getFibonacciNumbers4Mil(acc: List[Int], i: Int): List[Int] = {
      if (acc(i) <= 4000000 || i == 10) getFibonacciNumbers4Mil((acc(i) + acc(i+1)) :: acc, i + 1) else acc
    }

    val fib = getFibonacciNumbers4Mil(List(1, 2), 0)
    println(fib)

    fib
  }

  def go(): Unit = {
    println(getMultiplesOf3And5(1000).sum)
  }

  def main(args: Array[String]): Unit = {
    go()
  }
}